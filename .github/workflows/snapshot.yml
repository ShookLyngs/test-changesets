# Release snapshot packages to NPM.

name: Release Snapshots

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release-snapshots:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm i

      - name: Add snapshot changeset
        run: |
          cat << EOF > ".changeset/snap-release-changeset.md"
            ---
            "test-changesets-action": patch
            ---
            Add snapshot changeset for snapshot releases
          EOF

      - name: Version packages as "package@0.0.0-snap-{timestamp}"
        run: npx changeset version --snapshot snap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm (ignore GitHub)
        uses: changesets/action@v1
        id: changesets
        with:
          publish: pnpm changeset publish --tag snap
          createGithubReleases: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Check status of the published outputs
        run: |
          echo "published=${{ steps.changesets.outputs.published }}"
          echo "publishedPackages=${{ steps.changesets.outputs.publishedPackages }}"

      - name: Create pull_request comment
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
        run: echo "PR_NUMBER=${{ github.event.pull_request.number }}"

      - name: Create comment in pull_request
        uses: actions/github-script@v6
        id: comment-body
        if: steps.changesets.outputs.published
        env:
          PACKAGES: ${{ steps.changesets.outputs.publishedPackages }}
        with:
          script: |
            const head = '| Package | Version |';
            const separator = '| --- | --- |';
            const table = [head, separator];
            for (const package of JSON.parse(process.env.PACKAGES)) {
              table.push(`| ${pkg} | ${version} |`);
            }
            return table.join('\n');

      - name: Create comment in pull_request
        if: steps.changesets.outputs.published && github.event_name == 'pull_request' && github.event.pull_request.merged
        uses: actions/github-script@v6
        env:
          PULL_ID: ${{ github.event.pull_request.number }}
          BODY: ${{ steps.comment-body.outputs.result }}
        with:
          script: |
            github.issues.createComment({
              repo: context.repo.repo,
              owner: context.repo.owner,  
              issue_number: process.env.PULL_ID,
              body: process.env.BODY,
            });

      - name: Create commit comment
        uses: peter-evans/commit-comment@v3
        if: steps.changesets.outputs.published && github.event_name != 'pull_request'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.comment-body.outputs.result }}
